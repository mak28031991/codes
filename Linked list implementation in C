#include<stdio.h>
#include<stdlib.h>
struct node 
{
    int data;
    struct node * next;    
};
struct node * GetNewNode(int num)
{
    struct node * newnode;
	
    newnode=(struct node *) malloc(sizeof(struct node ));
    if(!newnode)
    {
        printf("memory error\n");
        return;
    }
    newnode->data=num;
return newnode;
}

void ReverseLinkedList(struct node **head)
{
	struct node * prev= NULL;
	struct node * curr=*head;
	struct node * next;
	while(curr!=NULL)
	{
		next=curr->next;
		curr->next=prev;
		prev=curr;
		curr=next;
	}	
	*head=prev;
	Display(*head);
}
void ReverseLinkedListRecursive(struct node **head_ref)
{
	struct node* first;
    struct node* rest;
      
    /* empty list */
    if (*head_ref == NULL)
       return;   
 
    /* suppose first = {1, 2, 3}, rest = {2, 3} */
    first = *head_ref;  
    rest  = first->next;
 
    /* List has only one node */
    if (rest == NULL)
       return;   
 
    /* reverse the rest list and put the first element at the end */
    ReverseLinkedListRecursive(&rest);
    first->next->next  = first;  
     
    /* tricky step -- see the diagram */
    first->next  = NULL;          
 	printf("head is %d\n",rest->data);
    /* fix the head pointer */
    *head_ref = rest;  	
	
	Display(*head_ref);
}

void ReverseLinkedListRecursive2(struct node **h,struct node *head)
{
	if(head==NULL)
	return;
	struct node *first=head;
	struct node *second= (head)->next;
	ReverseLinkedListRecursive2(h,second);
	if(second)
	{
	second->next=first;
 
 
    }
    else
    {
    	*h=first;
    }
    first->next=NULL;
    //*head=first;
 
}
void FloydCycleFinding(struct node * head)
{
	struct node * fast, *slow;
	fast= head;
	slow=head;
	while(slow!=NULL && fast!=NULL && fast->next!=NULL)
	{
		fast=fast->next->next;
		slow=slow->next;
		if(slow==fast)
		{
			printf("cycle is there\n");
		return;
		}
		
	}
	printf("no cycle is there\n");
	return;
	
}
void Append(struct node ** head, int num)
{
    struct node * last;
	last = *head;
	struct node * newnode = GetNewNode(num);
    newnode->next=NULL;
   
    if(*head==NULL)
    {    
        *head = newnode;
		Display(*head);	
		printf("Length of Linked List is %d \n",Length(*head));
        return ;
    }
   
    while(last->next!=NULL)
    {
		last=(last)->next;
    }
        last->next= newnode;
		Display(*head);	
		printf("Length of Linked List is %d \n",Length(*head));
        return ;  
	
}
void AddAtBegin(struct node ** head, int num)
{
    struct node * newnode;
	newnode=GetNewNode(num);
	newnode->next=*head;
	*head=newnode;
	Display(*head);
	printf("Length of Linked List is %d \n",Length(*head));
	
}
void AddAfter( struct node * head,int index, int num)
{
	struct node * newnode=GetNewNode(num);
	struct node * headcopy =head;
	int i=1;
	while(i<index && head!=NULL)
	{
		i++;
		head=head->next;
	}
	if(i==index)
	{
		newnode->next=head->next;
		head->next=newnode;
	}
	else
	{
		printf("entered index in not available");
	}
	Display(headcopy);
	printf("Length of Linked List is %d \n",Length(headcopy));
}
void Display(struct node * head)
{
    while(head!=NULL)
    {
        printf("%d ",head->data);
        head=head->next;
    }
printf("\n");
}
void Delete(struct node ** head,int index)
{
    
	if(index==1)
	{
		*head = (*head)->next;
	}
	else
	{
		struct node * prev;
		prev= *head;
		int i=1;
		while(i<index-1 && prev!=NULL)
		{
			i++;
			prev=prev->next;
		}
		if(i==index-1)
		{
			prev->next=(prev->next)->next;
		}
		else
		{
			printf("entered index in not available");
		}
	}	
	Display(*head);
	printf("Length of Linked List is %d \n",Length(*head));
}
int Length(struct node * head)
{
	int count=1;
	while(head->next!=NULL)
	{
		count++;
		head= head->next;
	}
	return count;
}
void Search(struct node * head, int x)
{
	int count=1;
	if(head == NULL)
	{
		printf("Linked list is empty\n");
		return;
	}
	
	while(head!=NULL)
	{
		if(head->data==x)
		{
			printf("%d is found at node no: %d\n",x,count);
			return;
		}
		else
		{
			count++;
			head= head->next;
		}
	}
	printf("node with %x not found\n",x);
	return ;
}
void NthNode(struct node * head, int n)
{
	int count=1;
	if(n<=0 || n > Length(head))
	{
		printf(" Not a valid node.\n");
		return;
	}
	if(head==NULL)
	{
		printf("Linked List is empty\n");
		return;
	}
	while(head!=NULL && count!=n)
	{
		head=head->next;
		count++;
	}
	
		printf("Element at %d node is %d \n",n,head->data);
		return;
	
	
	
}

int main()
{
    struct node * ll=NULL;
	Search(ll,8);
    Append(&ll,3);
	
    Append(&ll,5);
	
	Append(&ll,7);
	
    Append(&ll,9);

	AddAtBegin(&ll,2);
	
	AddAtBegin(&ll,1);

	AddAtBegin(&ll,0);

	AddAfter(ll,4,4);
	
	AddAfter(ll,6,6);

	AddAfter(ll,8,8);

	Delete(&ll,1);

	Delete(&ll,3);
	Search(ll,5);
	Search(ll,3);
	Search(ll,7);
	Search(ll,17);
	NthNode(ll,5);
	NthNode(ll,2);
	ReverseLinkedList(&ll);
	ReverseLinkedListRecursive(&ll);
	struct node* head = NULL;
 
  	Append(&head, 20);
  	Append(&head, 4);
  	Append(&head, 15);
  	Append(&head, 10);
 
  /* Create a loop for testing */
  	//head->next->next->next->next = head;
  	FloydCycleFinding(head);
    return 0;
}
